diff --git a/WICED/platform/MCU/STM32F2xx/peripherals/libraries/src/stm32f2xx_spi.c b/WICED/platform/MCU/STM32F2xx/peripherals/libraries/src/stm32f2xx_spi.c
index f2a9cde..cd7425c 100644
--- a/WICED/platform/MCU/STM32F2xx/peripherals/libraries/src/stm32f2xx_spi.c
+++ b/WICED/platform/MCU/STM32F2xx/peripherals/libraries/src/stm32f2xx_spi.c
@@ -350,7 +350,7 @@ void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
     pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
     
     /* Get the I2S source clock value */
-    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
+    i2sclk = (uint32_t)(((HSI_VALUE / pllm) * plln) / pllr);
   #endif /* I2S_EXTERNAL_CLOCK_VAL */
     
     /* Compute the Real divider depending on the MCLK output state, with a floating point */
@@ -386,6 +386,11 @@ void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
     i2sodd = 0;
   }
 
+#ifdef AMAZONDASH
+  i2sdiv = 12;
+  i2sodd = 1;
+#endif
+
   /* Write to SPIx I2SPR register the computed value */
   SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
  
diff --git a/WICED/platform/MCU/STM32F2xx/peripherals/peripherals.mk b/WICED/platform/MCU/STM32F2xx/peripherals/peripherals.mk
index c6ab449..1e3b1f0 100644
--- a/WICED/platform/MCU/STM32F2xx/peripherals/peripherals.mk
+++ b/WICED/platform/MCU/STM32F2xx/peripherals/peripherals.mk
@@ -23,4 +23,5 @@ $(NAME)_SOURCES := platform_adc.c \
                    platform_rtc.c \
                    platform_spi.c \
                    platform_uart.c \
-                   platform_watchdog.c
+                   platform_watchdog.c \
+                   platform_i2s.c
diff --git a/WICED/platform/MCU/STM32F2xx/peripherals/platform_i2s.c b/WICED/platform/MCU/STM32F2xx/peripherals/platform_i2s.c
new file mode 100644
index 0000000..1b3dcf0
--- /dev/null
+++ b/WICED/platform/MCU/STM32F2xx/peripherals/platform_i2s.c
@@ -0,0 +1,392 @@
+#include "platform_i2s.h"
+#include "wwd_assert.h"
+#include "platform_audio.h"
+#include "platform_config.h"
+#include "string.h"
+#include "stm32f2xx_spi.h"
+
+/******************************************************
+ *                      Macros
+ ******************************************************/
+#define I2SCFGR_CLEAR_MASK        ((uint16_t)0xF040)
+
+/******************************************************
+ *                    Constants
+ ******************************************************/
+
+#define I2S_STANDARD_PHILLIPS
+
+#ifdef I2S_STANDARD_PHILLIPS
+ #define I2S_STANDARD                   I2S_Standard_Phillips
+#elif defined(I2S_STANDARD_MSB)
+ #define I2S_STANDARD                   I2S_Standard_MSB
+#elif defined(I2S_STANDARD_LSB)
+ #define I2S_STANDARD                   I2S_Standard_LSB
+#else
+ #error "Error: No audio communication standard selected !"
+#endif
+
+#define I2S_SLAVE_WS_WAR( I2S )        while (!platform_gpio_input_get(i2s_interfaces[I2S].pin_ws)){}
+
+#define HSE_RATIO                   ((double)(HSE_VALUE/PLL_M_CONSTANT)/256) /* for example for HSE=26Mhz and PLLM=26: ==> (26 000 000 / 26)/256 = 3906.25Hz */
+#define I2S_PRESCALING_FACTOR_MIN   (4)
+#define I2S_PRESCALING_FACTOR_MAX   (511)
+#define PLLI2S_N_MIN                (192)
+#define PLLI2S_N_MAX                (432)
+#define PLLI2S_R_MIN                (2)
+#define PLLI2S_R_MAX                (7)
+#define CLOSEST_LOW_COEFFS          (0)
+#define CLOSEST_HIGH_COEFFS         (1)
+
+
+/******************************************************
+ *                   Enumerations
+ ******************************************************/
+
+/******************************************************
+ *                 Type Definitions
+ ******************************************************/
+typedef struct
+{
+    uint8_t pllm;
+    uint32_t sample_rate;
+    uint32_t mclk_freq;
+    uint16_t plli2sn;
+    uint8_t plli2sr;
+} mclk_pickup_entry_t ;
+
+
+typedef struct
+{
+    uint16_t plli2sn;
+    uint8_t  plli2sr;
+    uint16_t i2sodd;
+    uint16_t i2sdiv;
+    uint32_t freq;
+} clock_system_setup_for_freq_t;
+
+
+/******************************************************
+ *                    Structures
+ ******************************************************/
+
+struct i2s_control
+{
+    /* Configuration from initialize. */
+    uint8_t                         sample_bits;
+
+    /* RX/TX specific data. */
+    wiced_i2s_transfer_t            op_type;
+
+    uint16_t                        period_size;
+    uint32_t                        position;
+
+    uint8_t*                        audio_buffer_ptr;
+    uint16_t                        audio_buffer_size;
+
+    uint16_t                        periods_count;
+    wiced_audio_session_ref         sh;
+
+    /* current configuration */
+    I2S_InitTypeDef                 i2s_config;
+    wiced_bool_t                    is_initialised;
+    int                             selected_pll_configuration;
+
+    /* current PLL and divider settings */
+    clock_system_setup_for_freq_t   sample_rate_clocks_coeffs;
+
+} i2s_control[WICED_I2S_MAX];
+
+/******************************************************
+ *               Static Function Declarations
+ ******************************************************/
+
+//void i2s1_dma_irq( void );
+//void i2s1_irq( void );
+
+static void           i2s_gpio_init        ( wiced_i2s_t i2s );
+static void           i2s_gpio_deinit      ( wiced_i2s_t i2s );
+static wiced_result_t i2s_peripheral_init( wiced_i2s_t i2s, const wiced_i2s_params_t* config, uint32_t* mclk);
+static void           i2s_peripheral_deinit( wiced_i2s_t i2s );
+static void           i2s_dma_init         ( wiced_i2s_t i2s, uint32_t dir );
+static void           i2s_dma_deinit       ( wiced_i2s_t i2s );
+
+extern wiced_result_t wiced_audio_buffer_platform_event(wiced_audio_session_ref sh, wiced_audio_platform_event_t event);
+extern uint16_t       wiced_audio_buffer_platform_get_periods(wiced_audio_session_ref sh);
+extern wiced_result_t wiced_audio_buffer_platform_event(wiced_audio_session_ref sh, wiced_audio_platform_event_t event);
+
+/******************************************************
+ *               Variable Definitions
+ ******************************************************/
+
+uint32_t played_periods = 0;
+uint32_t audio_hiccups = 0;
+
+extern const platform_i2s_t i2s_interfaces[];
+
+/******************************************************
+ *               Function Definitions
+ ******************************************************/
+
+wiced_result_t wiced_i2s_init( wiced_audio_session_ref sh, wiced_i2s_t i2s, wiced_i2s_params_t* config, uint32_t* mclk)
+{
+    wiced_result_t status;
+
+    i2s_gpio_init( i2s );
+
+    status = i2s_peripheral_init( i2s, config, mclk );
+    if ( WICED_SUCCESS != status )
+    {
+        i2s_gpio_deinit( i2s );
+        return status;
+    }
+
+    i2s_control[ i2s ].sample_bits = config->bits_per_sample;
+    i2s_control[ i2s ].period_size = config->period_size;
+    i2s_control[ i2s ].sh = sh;
+
+    return WICED_SUCCESS;
+}
+
+wiced_result_t wiced_i2s_deinit( wiced_i2s_t i2s )
+{
+    i2s_gpio_deinit( i2s );
+    i2s_peripheral_deinit( i2s );
+    i2s_dma_deinit( i2s );
+
+    return WICED_SUCCESS;
+}
+
+wiced_result_t wiced_i2s_start( wiced_i2s_t i2s )
+{
+    I2S_Init(i2s_interfaces[i2s].spi, &i2s_control[i2s].i2s_config);
+
+    RCC_PLLI2SConfig(384, 5); /* WORKS */
+    RCC_I2SCLKConfig(RCC_I2S2CLKSource_PLLI2S);
+    RCC_PLLI2SCmd(ENABLE);
+    while ( RCC_GetFlagStatus(RCC_FLAG_PLLI2SRDY) == RESET );
+
+#if 0
+    i2s_dma_init( i2s, DMA_DIR_PeripheralToMemory );
+
+    /* Enable the DMA Rx request. */
+    SPI_I2S_DMACmd( i2s_interfaces[i2s].spi, SPI_I2S_DMAReq_Rx, ENABLE );
+
+    /* Enable the I2S DMA stream. */
+    DMA_Cmd( i2s_interfaces[i2s].rx_dma.stream, ENABLE );
+
+    /* Enable the I2S peripheral. */
+    I2S_Cmd( i2s_interfaces[i2s].spi, ENABLE );
+
+#else
+    /* Enable the I2S peripheral. */
+    I2S_Cmd( i2s_interfaces[i2s].spi, ENABLE );
+
+    SPI_I2S_ITConfig(i2s_interfaces[i2s].spi, SPI_I2S_IT_RXNE, ENABLE);
+
+    for (int i = 0; i < 1024; i++) {
+        while ( SPI_I2S_GetFlagStatus( i2s_interfaces[i2s].spi, SPI_I2S_FLAG_RXNE ) == RESET );
+        printf("0x%04x ", SPI_I2S_ReceiveData( i2s_interfaces[i2s].spi ));
+    }
+#endif
+
+    return WICED_SUCCESS;
+}
+
+wiced_result_t wiced_i2s_stop( wiced_i2s_t i2s )
+{
+    /* DISABLE the I2S DMA stream. */
+    DMA_Cmd(i2s_interfaces[i2s].rx_dma.stream, DISABLE);
+
+    /* Disable the I2S peripheral. */
+    I2S_Cmd(i2s_interfaces[i2s].spi, DISABLE);
+
+    return WICED_SUCCESS;
+}
+
+/******************************************************
+ *          Static Function Definitions
+ ******************************************************/
+
+static void i2s_gpio_init( wiced_i2s_t i2s )
+{
+    platform_gpio_set_alternate_function(i2s_interfaces[i2s].pin_ck->port, i2s_interfaces[i2s].pin_ck->pin_number, GPIO_OType_PP, GPIO_PuPd_NOPULL, i2s_interfaces[i2s].gpio_af );
+    platform_gpio_set_alternate_function(i2s_interfaces[i2s].pin_sd->port, i2s_interfaces[i2s].pin_sd->pin_number, GPIO_OType_PP, GPIO_PuPd_NOPULL, i2s_interfaces[i2s].gpio_af );
+    platform_gpio_set_alternate_function(i2s_interfaces[i2s].pin_ws->port, i2s_interfaces[i2s].pin_ws->pin_number, GPIO_OType_PP, GPIO_PuPd_NOPULL, i2s_interfaces[i2s].gpio_af );
+
+    /* MCLK */
+    if ( i2s_interfaces[i2s].enable_mclk != 0 )
+    {
+        platform_gpio_set_alternate_function(i2s_interfaces[i2s].pin_mclk->port, i2s_interfaces[i2s].pin_mclk->pin_number, GPIO_OType_PP, GPIO_PuPd_NOPULL, i2s_interfaces[i2s].gpio_af );
+    }
+}
+
+static void i2s_gpio_deinit(wiced_i2s_t i2s)
+{
+    platform_gpio_deinit( i2s_interfaces[ i2s ].pin_ck );
+    platform_gpio_deinit( i2s_interfaces[ i2s ].pin_sd );
+    platform_gpio_deinit( i2s_interfaces[ i2s ].pin_ws );
+
+    if ( i2s_interfaces[i2s].enable_mclk != 0 )
+    {
+        platform_gpio_deinit( i2s_interfaces[ i2s ].pin_mclk );
+    }
+}
+
+wiced_result_t wiced_i2s_set_audio_buffer_details(wiced_i2s_t i2s, uint8_t* buffer_ptr, uint16_t size)
+{
+    if( (buffer_ptr != NULL) && (size != 0) )
+    {
+        i2s_control[i2s].audio_buffer_ptr = buffer_ptr;
+        i2s_control[i2s].position = 0;
+        i2s_control[i2s].audio_buffer_size = size;
+        return WICED_SUCCESS;
+    }
+    else
+    {
+        return WICED_ERROR;
+    }
+}
+
+static wiced_result_t i2s_peripheral_init( wiced_i2s_t i2s, const wiced_i2s_params_t* config, uint32_t* mclk )
+{
+    I2S_InitTypeDef*                i2s_init_ptr = &i2s_control[i2s].i2s_config;
+
+    /* Enable I2S peripheral clock. */
+    i2s_interfaces[i2s].peripheral_clock_func( i2s_interfaces[i2s].peripheral_clock, ENABLE );
+
+    SPI_I2S_DeInit( i2s_interfaces[i2s].spi );
+    switch ( config->bits_per_sample )
+    {
+        case 16:
+            i2s_init_ptr->I2S_DataFormat = I2S_DataFormat_16b;
+            break;
+        case 24:
+            i2s_init_ptr->I2S_DataFormat = I2S_DataFormat_24b;
+            break;
+        case 32:
+            i2s_init_ptr->I2S_DataFormat = I2S_DataFormat_32b;
+            break;
+            /* XXX: no 16bextended! */
+        default:
+            return WICED_BADARG;
+    }
+
+    if ( IS_I2S_AUDIO_FREQ(config->sample_rate) == 0)
+    {
+        return WICED_BADARG;
+    }
+
+    i2s_init_ptr->I2S_AudioFreq = config->sample_rate; /* XXX: What does default (2) do? */
+    i2s_init_ptr->I2S_Standard = I2S_STANDARD;
+    i2s_init_ptr->I2S_CPOL = I2S_CPOL_Low;
+    i2s_init_ptr->I2S_Mode = i2s_interfaces[i2s].is_master ? I2S_Mode_MasterRx : I2S_Mode_SlaveRx;
+
+    /* XXX: Accord to the refman, mclk is only available for master mode. */
+    i2s_init_ptr->I2S_MCLKOutput = (i2s_interfaces[i2s].is_master && i2s_interfaces[i2s].enable_mclk) ? I2S_MCLKOutput_Enable : I2S_MCLKOutput_Disable;
+
+    RCC_PLLI2SCmd(DISABLE);
+
+    i2s_control[i2s].is_initialised = WICED_TRUE;
+    /* The I2S peripheral will be enabled when either an rx/tx function is called. */
+
+    return WICED_SUCCESS;
+}
+
+
+wiced_result_t  wiced_i2s_get_current_hw_pointer( wiced_i2s_t i2s, uint32_t* hw_pointer )
+{
+    *hw_pointer = ( i2s_control[i2s].period_size - i2s_interfaces[i2s].rx_dma.stream->NDTR * 2 ) / 4;
+
+    return WICED_SUCCESS;
+}
+
+static void i2s_peripheral_deinit( wiced_i2s_t i2s )
+{
+    /* Disable I2S peripheral if not already done by rx/tx completion. */
+    I2S_Cmd(i2s_interfaces[i2s].spi, DISABLE);
+
+    /* Deinitialize the I2S peripheral. */
+    SPI_I2S_DeInit(i2s_interfaces[i2s].spi);
+
+    i2s_control[i2s].selected_pll_configuration = -1;
+    memset((void*)&i2s_control[i2s].i2s_config, 0x00, sizeof(i2s_control[i2s].i2s_config));
+
+
+    /* Disable I2S peripheral clock. */
+    i2s_interfaces[i2s].peripheral_clock_func( i2s_interfaces[i2s].peripheral_clock, DISABLE );
+}
+
+static void i2s_dma_init( wiced_i2s_t i2s, uint32_t dir )
+{
+    DMA_InitTypeDef DMA_InitStructure;
+
+    const platform_i2s_t *i = &i2s_interfaces[i2s];
+    SPI_TypeDef* spi = i->spi;
+    const platform_dma_config_t* dma = &i->rx_dma;
+
+    /* Enable DMA clock. */
+    (*i->peripheral_clock_func)(i->peripheral_clock, ENABLE);
+
+    /* Initialize DMA default values. */
+    DMA_InitStructure.DMA_PeripheralInc      = DMA_PeripheralInc_Disable;
+    DMA_InitStructure.DMA_MemoryInc          = DMA_MemoryInc_Enable;
+    DMA_InitStructure.DMA_Priority           = DMA_Priority_VeryHigh;
+    DMA_InitStructure.DMA_FIFOMode           = DMA_FIFOMode_Disable;
+    DMA_InitStructure.DMA_FIFOThreshold      = DMA_FIFOThreshold_Full;
+    DMA_InitStructure.DMA_MemoryBurst        = DMA_MemoryBurst_Single;
+    DMA_InitStructure.DMA_PeripheralBurst    = DMA_PeripheralBurst_Single;
+    DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
+    DMA_InitStructure.DMA_MemoryDataSize     = DMA_MemoryDataSize_Word;
+    DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t) &spi->DR;
+    DMA_InitStructure.DMA_Memory0BaseAddr    = (uint32_t)&i2s_control[i2s].audio_buffer_ptr[0];
+    DMA_InitStructure.DMA_BufferSize         = i2s_control[i2s].period_size;
+    DMA_InitStructure.DMA_Mode               = DMA_Mode_Circular; //Normal
+    DMA_InitStructure.DMA_DIR                = dir;
+    DMA_InitStructure.DMA_Channel            = dma->channel;
+
+    /* Configure DMA. */
+    DMA_Cmd( dma->stream, DISABLE );
+    DMA_DeInit( dma->stream );
+    DMA_Init( dma->stream, &DMA_InitStructure );
+
+    /* Enable DMA interrupts. */
+    DMA_ITConfig( dma->stream, DMA_IT_HT | DMA_IT_TE | DMA_IT_DME | DMA_IT_FE | DMA_IT_TC | DMA_IT_TE, ENABLE );
+
+    /* I2S DMA IRQ channel configuration. */
+    NVIC_EnableIRQ( dma->irq_vector );
+}
+
+static void i2s_dma_deinit( wiced_i2s_t i2s )
+{
+    const platform_i2s_t *i = &i2s_interfaces[i2s];
+    const platform_dma_config_t* dma = &i->rx_dma;
+
+    NVIC_DisableIRQ( dma->irq_vector );
+
+    /* Disable the DMA stream before the deinit. */
+    DMA_Cmd( dma->stream, DISABLE );
+
+    /* Deinitialize the DMA stream. */
+    DMA_DeInit( dma->stream );
+
+    /* The DMA clock is not disabled as it can be used by other streams. */
+}
+
+uint32_t IRQ_COUNTER = 0;
+void platform_i2s_irq( uint32_t i2s )
+{
+    IRQ_COUNTER++;
+}
+
+void platform_i2s_tx_dma_irq( uint32_t i2s )
+{
+    IRQ_COUNTER++;
+    DMA_ClearITPendingBit(i2s_interfaces[i2s].tx_dma.stream, DMA_IT_TCIF4);
+}
+
+void platform_i2s_rx_dma_irq( uint32_t i2s )
+{
+    IRQ_COUNTER++;
+    DMA_ClearITPendingBit(i2s_interfaces[i2s].rx_dma.stream, DMA_IT_TCIF3);
+}
diff --git a/WICED/platform/MCU/STM32F2xx/peripherals/platform_i2s.h b/WICED/platform/MCU/STM32F2xx/peripherals/platform_i2s.h
new file mode 100644
index 0000000..3e1960a
--- /dev/null
+++ b/WICED/platform/MCU/STM32F2xx/peripherals/platform_i2s.h
@@ -0,0 +1,71 @@
+#pragma once
+
+#include "wiced_platform.h"
+#include "wiced_audio.h"
+
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+/******************************************************
+ *                      Macros
+ ******************************************************/
+
+/******************************************************
+ *                    Constants
+ ******************************************************/
+
+/******************************************************
+ *                   Enumerations
+ ******************************************************/
+
+typedef enum
+{
+    WICED_I2S_READ,
+    WICED_I2S_WRITE
+} wiced_i2s_transfer_t;
+
+/******************************************************
+ *                 Type Definitions
+ ******************************************************/
+
+typedef DMA_Stream_TypeDef dma_stream_registers_t;
+typedef uint32_t           dma_channel_t;
+
+typedef struct
+{
+    uint32_t sample_rate;
+    uint16_t period_size;
+    uint8_t bits_per_sample;
+    uint8_t channels;
+} wiced_i2s_params_t;
+
+typedef struct
+{
+    void*    next;
+    void*    buffer;
+    uint32_t buffer_size;
+} platform_i2s_transfer_t;
+
+/* the callback will give a neww buffer pointer to the i2s device */
+typedef void(*wiced_i2s_tx_callback_t)(uint8_t** buffer, uint16_t* size, void* context);
+
+/* returned buffer and new buffer to receive more data */
+typedef void(*wiced_i2s_rx_callback_t)( uint8_t* buffer, uint16_t read_size,  uint8_t**rx_buffer, uint16_t*rx_buf_size );
+
+/******************************************************
+ *               Function Declarations
+ ******************************************************/
+
+wiced_result_t wiced_i2s_init                    ( wiced_audio_session_ref sh, wiced_i2s_t i2s, wiced_i2s_params_t* params, uint32_t* mclk);
+wiced_result_t wiced_i2s_deinit                  ( wiced_i2s_t i2s);
+wiced_result_t wiced_i2s_set_audio_buffer_details( wiced_i2s_t i2s, uint8_t* buffer_ptr, uint16_t size);
+wiced_result_t wiced_i2s_start                   ( wiced_i2s_t i2s);
+wiced_result_t wiced_i2s_stop                    ( wiced_i2s_t);
+wiced_result_t wiced_i2s_get_current_hw_pointer  ( wiced_i2s_t i2s, uint32_t* hw_pointer );
+
+
+#ifdef __cplusplus
+} /* extern "C" */
+#endif
diff --git a/WICED/platform/MCU/STM32F2xx/peripherals/platform_mcu_peripheral.h b/WICED/platform/MCU/STM32F2xx/peripherals/platform_mcu_peripheral.h
index afdc4d2..d6a9d77 100644
--- a/WICED/platform/MCU/STM32F2xx/peripherals/platform_mcu_peripheral.h
+++ b/WICED/platform/MCU/STM32F2xx/peripherals/platform_mcu_peripheral.h
@@ -147,6 +147,22 @@ typedef struct
 
 typedef struct
 {
+    SPI_TypeDef*                         spi;
+    uint8_t                              gpio_af;
+    unsigned                             is_master   : 1;
+    unsigned                             enable_mclk : 1;
+    peripheral_clock_t                   peripheral_clock;
+    platform_peripheral_clock_function_t peripheral_clock_func;
+    const platform_gpio_t*               pin_ck;
+    const platform_gpio_t*               pin_sd;
+    const platform_gpio_t*               pin_ws;
+    const platform_gpio_t*               pin_mclk;
+    platform_dma_config_t                tx_dma;
+    platform_dma_config_t                rx_dma;
+} platform_i2s_t;
+
+typedef struct
+{
     uint8_t unimplemented;
 } platform_spi_slave_driver_t;
 
@@ -215,6 +231,10 @@ void              platform_uart_irq                   ( platform_uart_driver_t*
 void              platform_uart_tx_dma_irq            ( platform_uart_driver_t* driver );
 void              platform_uart_rx_dma_irq            ( platform_uart_driver_t* driver );
 
+void              platform_i2s_irq                    ( uint32_t i2s );
+void              platform_i2s_tx_dma_irq             ( uint32_t i2s );
+void              platform_i2s_rx_dma_irq             ( uint32_t i2s );
+
 uint8_t           platform_spi_get_port_number        ( platform_spi_port_t* spi );
 
 platform_result_t platform_filesystem_init            ( void );
diff --git a/WICED/platform/include/platform_audio.h b/WICED/platform/include/platform_audio.h
index d9e5462..cb3520a 100644
--- a/WICED/platform/include/platform_audio.h
+++ b/WICED/platform/include/platform_audio.h
@@ -10,6 +10,7 @@
 /** @file
  */
 #pragma once
+#include "platform_constants.h"
 
 #ifdef __cplusplus
 extern "C" {
diff --git a/apps/snip/i2s/i2s.c b/apps/snip/i2s/i2s.c
new file mode 100644
index 0000000..dfaeddb
--- /dev/null
+++ b/apps/snip/i2s/i2s.c
@@ -0,0 +1,22 @@
+#include <stdlib.h>
+#include "platform.h"
+#include "platform_audio.h"
+#include "wiced.h"
+#include "spi_flash.h"
+#include "wwd_debug.h"
+
+extern uint32_t IRQ_COUNTER;
+
+void application_start()
+{
+	wiced_init();
+	platform_init_audio();
+
+	printf("taking a 10 second nap\n");
+	host_rtos_delay_milliseconds(10 * 1000);
+
+	printf("we got %d IRQs!!!!!!!\n", IRQ_COUNTER);
+	platform_deinit_audio();
+
+	printf(("that's all folks!\n"));
+}
diff --git a/apps/snip/i2s/i2s.mk b/apps/snip/i2s/i2s.mk
new file mode 100644
index 0000000..a28f33d
--- /dev/null
+++ b/apps/snip/i2s/i2s.mk
@@ -0,0 +1,3 @@
+NAME := App_I2s
+
+$(NAME)_SOURCES := i2s.c
diff --git a/libraries/drivers/audio/ADMP441/ADMP441.mk b/libraries/drivers/audio/ADMP441/ADMP441.mk
new file mode 100644
index 0000000..e2863cf
--- /dev/null
+++ b/libraries/drivers/audio/ADMP441/ADMP441.mk
@@ -0,0 +1,4 @@
+NAME := Platform_admp441_driver
+
+$(NAME)_SOURCES += admp441.c
+GLOBAL_INCLUDES += .
diff --git a/libraries/drivers/audio/ADMP441/admp441.c b/libraries/drivers/audio/ADMP441/admp441.c
new file mode 100644
index 0000000..017cabe
--- /dev/null
+++ b/libraries/drivers/audio/ADMP441/admp441.c
@@ -0,0 +1,51 @@
+#include "wiced_platform.h"
+#include "wiced_audio.h"
+#include "admp441.h"
+#include "wwd_constants.h"
+#include "wwd_assert.h"
+
+#include "platform_i2s.h"
+#include "wwd_assert.h"
+#include "string.h"
+#include "stdlib.h"
+#include "stdio.h"
+
+#define ADMP441_MODE_SWITCH_DELAY_IN_MILLIS (85)
+
+wiced_result_t admp441_pause(admp441_device_data_t *data)
+{
+    wiced_i2s_stop(data->port);
+    wiced_gpio_output_low(data->chipen);
+    host_rtos_delay_milliseconds(ADMP441_MODE_SWITCH_DELAY_IN_MILLIS);
+    return wiced_i2s_stop(data->port);
+}
+
+wiced_result_t admp441_resume(admp441_device_data_t *data)
+{
+    wiced_gpio_output_high(data->chipen);
+    host_rtos_delay_milliseconds(ADMP441_MODE_SWITCH_DELAY_IN_MILLIS);
+    wiced_i2s_start(data->port);
+    return WICED_SUCCESS;
+}
+
+wiced_result_t admp441_init(admp441_device_data_t *data)
+{
+    wiced_gpio_init(data->chipen, OUTPUT_PUSH_PULL);
+    wiced_gpio_output_low(data->chipen);
+    wiced_i2s_params_t config = {
+        .sample_rate = I2S_AudioFreq_48k,
+        .period_size = 1024,
+        .bits_per_sample = 24,
+        .channels = 1,
+    };
+    uint32_t mclk = 0;
+    wiced_i2s_set_audio_buffer_details(data->port, &data->buffer[0], sizeof(data->buffer));
+    wiced_i2s_init(0, data->port, &config, &mclk);
+    return WICED_SUCCESS;
+}
+
+wiced_result_t admp441_deinit(admp441_device_data_t *data)
+{
+    admp441_pause(data);
+    return wiced_i2s_deinit(data->port);
+}
diff --git a/libraries/drivers/audio/ADMP441/admp441.h b/libraries/drivers/audio/ADMP441/admp441.h
new file mode 100644
index 0000000..2472e4a
--- /dev/null
+++ b/libraries/drivers/audio/ADMP441/admp441.h
@@ -0,0 +1,28 @@
+#pragma once
+
+#include "wiced_audio.h"
+#include "wiced_platform.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+typedef struct
+{
+    wiced_i2s_t                     port;
+    wiced_gpio_t                    chipen;
+    wiced_gpio_t                    clk;
+    wiced_gpio_t                    ws;
+    wiced_gpio_t                    sd;
+    wiced_gpio_t                    mck;
+    uint8_t                         buffer[1024];
+} admp441_device_data_t;
+
+wiced_result_t admp441_pause(admp441_device_data_t *data);
+wiced_result_t admp441_resume(admp441_device_data_t *data);
+wiced_result_t admp441_init(admp441_device_data_t *data);
+wiced_result_t admp441_deinit(admp441_device_data_t *data);
+
+#ifdef __cplusplus
+} /* extern "C" */
+#endif
diff --git a/platforms/AMAZONDASH/AMAZONDASH.mk b/platforms/AMAZONDASH/AMAZONDASH.mk
index 580a274..faa6ab8 100644
--- a/platforms/AMAZONDASH/AMAZONDASH.mk
+++ b/platforms/AMAZONDASH/AMAZONDASH.mk
@@ -12,7 +12,7 @@ ifndef BUS
 BUS := SDIO
 endif
 
-VALID_BUSES := SDIO SPI
+VALID_BUSES := SDIO
 
 EXTRA_TARGET_MAKEFILES +=  $(MAKEFILES_PATH)/standard_platform_targets.mk
 
@@ -28,7 +28,9 @@ GLOBAL_DEFINES += HSE_VALUE=26000000
 GLOBAL_DEFINES += $$(if $$(NO_CRLF_STDIO_REPLACEMENT),,CRLF_STDIO_REPLACEMENT)
 
 # Components
-$(NAME)_COMPONENTS += drivers/spi_flash
+
+$(NAME)_COMPONENTS += drivers/spi_flash \
+                      drivers/audio/ADMP441
 
 # Source files
 $(NAME)_SOURCES := platform.c
diff --git a/platforms/AMAZONDASH/platform.c b/platforms/AMAZONDASH/platform.c
index 6be9c62..210e239 100644
--- a/platforms/AMAZONDASH/platform.c
+++ b/platforms/AMAZONDASH/platform.c
@@ -8,6 +8,7 @@
 #include "wiced_defaults.h"
 #include "wiced_platform.h"
 #include "wwd_rtos.h"
+#include "admp441.h"
 
 /******************************************************
  *                      Macros
@@ -56,9 +57,9 @@ const platform_gpio_t platform_gpio_pins[] =
   [WICED_GPIO_9] = { GPIOA, 10 }, // uart1 rx
 
   [WICED_GPIO_10] = { GPIOB , 6 }, // red LED
-  [WICED_GPIO_11] = { GPIOA, 13 },
-  [WICED_GPIO_12] = { GPIOA, 14 },
-  [WICED_GPIO_13] = { GPIOA, 15 },
+  [WICED_GPIO_11] = { GPIOA, 13 }, // jtms/swdio
+  [WICED_GPIO_12] = { GPIOA, 14 }, // jtck/swclk
+  [WICED_GPIO_13] = { GPIOA, 15 }, // jtdi
 
   [WICED_GPIO_14] = { GPIOB, 4 },
   [WICED_GPIO_15] = { GPIOB, 8 },
@@ -68,19 +69,22 @@ const platform_gpio_t platform_gpio_pins[] =
   [WICED_GPIO_18] = { GPIOC, 7 }, // uart6 rx
 
   [WICED_GPIO_19] = { GPIOA, 8 },
-
-  [WICED_GPIO_20] = { GPIOC, 1 },
-
+  [WICED_GPIO_20] = { GPIOC, 1 }, // i2s ch en
   [WICED_GPIO_21] = { GPIOB, 14 },
-
   [WICED_GPIO_22] = { GPIOB, 15 },
-
   [WICED_GPIO_23] = { GPIOA, 11 },
-//
 
 // from maximus64
   [WICED_GPIO_24] = { GPIOB, 7 }, // green LED
   [WICED_GPIO_25] = { GPIOA, 8 }, // blue LED
+
+// from dekuNukem's pinout
+  [WICED_GPIO_27] = { GPIOB, 12 }, // i2s ws (miso)
+  [WICED_GPIO_28] = { GPIOB, 10 }, // i2s clk
+
+// STM32F2 reference manual
+  [WICED_GPIO_29] = { GPIOC, 3 }, // i2s sd (mosi)
+  [WICED_GPIO_30] = { GPIOC, 9 }, // i2s mck (not used?)
 };
 
 /* ADC peripherals. Used WICED/platform/MCU/wiced_platform_common.c */
@@ -199,30 +203,6 @@ const platform_uart_t platform_uart_peripherals[] =
 };
 platform_uart_driver_t platform_uart_drivers[WICED_UART_MAX];
 
-
-#if 0
-/* I2C peripherals. Used by WICED/platform/MCU/wiced_platform_common.c */
-const platform_i2c_t platform_i2c_peripherals[] =
-{
-    [WICED_I2C_1] =
-    {
-        .port                    = I2C1,
-        .pin_scl                 = &platform_gpio_pins[WICED_GPIO_1],
-        .pin_sda                 = &platform_gpio_pins[WICED_GPIO_2],
-        .peripheral_clock_reg    = RCC_APB1Periph_I2C1,
-        .tx_dma                  = DMA1,
-        .tx_dma_peripheral_clock = RCC_AHB1Periph_DMA1,
-        .tx_dma_stream           = DMA1_Stream7,
-        .rx_dma_stream           = DMA1_Stream5,
-        .tx_dma_stream_id        = 7,
-        .rx_dma_stream_id        = 5,
-        .tx_dma_channel          = DMA_Channel_1,
-        .rx_dma_channel          = DMA_Channel_1,
-        .gpio_af                 = GPIO_AF_I2C1
-    },
-};
-#endif
-
 /* SPI flash. Exposed to the applications through include/wiced_platform.h */
 #if defined ( WICED_PLATFORM_INCLUDES_SPI_FLASH )
 const wiced_spi_device_t wiced_spi_flash =
@@ -235,6 +215,41 @@ const wiced_spi_device_t wiced_spi_flash =
 };
 #endif
 
+const platform_i2s_t i2s_interfaces[] =
+{
+    [WICED_I2S_1] =
+    {
+        .spi                          = SPI2,
+        .is_master                    = 1,
+        .enable_mclk                  = 0,
+        .gpio_af                      = GPIO_AF_SPI2,
+        .peripheral_clock             = RCC_APB1Periph_SPI2,
+        .peripheral_clock_func        = RCC_APB1PeriphClockCmd,
+        .pin_ck                       = &platform_gpio_pins[WICED_I2S2_CK],
+        .pin_sd                       = &platform_gpio_pins[WICED_I2S2_SD],
+        .pin_ws                       = &platform_gpio_pins[WICED_I2S2_WS],
+        .pin_mclk                     = &platform_gpio_pins[WICED_I2S2_MCLK],
+        .tx_dma =
+        {
+            .controller               = DMA1,
+            .stream                   = DMA1_Stream4,
+            .channel                  = DMA_Channel_0,
+            .irq_vector               = DMA1_Stream4_IRQn,
+            .complete_flags           = DMA_HISR_TCIF4, // guess
+            .error_flags              = ( DMA_HISR_TEIF4 | DMA_HISR_FEIF4 ), // guess
+        },
+        .rx_dma =
+        {
+            .controller               = DMA1,
+            .stream                   = DMA1_Stream3,
+            .channel                  = DMA_Channel_0,
+            .irq_vector               = DMA1_Stream3_IRQn,
+            .complete_flags           = DMA_LISR_TCIF3, // guess
+            .error_flags              = ( DMA_LISR_TEIF3 | DMA_LISR_FEIF3 | DMA_LISR_DMEIF3 ), // guess
+        },
+    }
+};
+
 /* UART standard I/O configuration */
 #ifndef WICED_DISABLE_STDIO
 static platform_uart_config_t stdio_config =
@@ -276,16 +291,6 @@ const platform_gpio_t wifi_sdio_pins[] =
     [WWD_PIN_SDIO_D3     ] = { GPIOC, 11 },
 };
 
-/* Wi-Fi gSPI bus pins. Used by WICED/platform/STM32F2xx/WWD/wwd_SPI.c */
-const platform_gpio_t wifi_spi_pins[] =
-{
-    [WWD_PIN_SPI_IRQ ] = { GPIOC,  9 },
-    [WWD_PIN_SPI_CS  ] = { GPIOC, 11 },
-    [WWD_PIN_SPI_CLK ] = { GPIOB, 13 },
-    [WWD_PIN_SPI_MOSI] = { GPIOB, 15 },
-    [WWD_PIN_SPI_MISO] = { GPIOB, 14 },
-};
-
 /******************************************************
  *               Function Definitions
  ******************************************************/
@@ -296,13 +301,14 @@ void platform_init_peripheral_irq_priorities( void )
     NVIC_SetPriority( RTC_WKUP_IRQn    ,  1 ); /* RTC Wake-up event   */
     NVIC_SetPriority( SDIO_IRQn        ,  2 ); /* WLAN SDIO           */
     NVIC_SetPriority( DMA2_Stream3_IRQn,  3 ); /* WLAN SDIO DMA       */
-    NVIC_SetPriority( DMA1_Stream3_IRQn,  3 ); /* WLAN SPI DMA        */
     NVIC_SetPriority( USART1_IRQn      ,  6 ); /* WICED_UART_1        */
     NVIC_SetPriority( USART6_IRQn      ,  6 ); /* WICED_UART_6        */
     NVIC_SetPriority( DMA2_Stream7_IRQn,  7 ); /* WICED_UART_1 TX DMA */
     NVIC_SetPriority( DMA2_Stream2_IRQn,  7 ); /* WICED_UART_1 RX DMA */
     NVIC_SetPriority( DMA2_Stream6_IRQn,  7 ); /* WICED_UART_2 TX DMA */
     NVIC_SetPriority( DMA2_Stream1_IRQn,  7 ); /* WICED_UART_2 RX DMA */
+NVIC_SetPriority( DMA1_Stream4_IRQn, 7 );
+NVIC_SetPriority( DMA1_Stream3_IRQn, 7 );
     NVIC_SetPriority( EXTI0_IRQn       , 14 ); /* GPIO                */
     NVIC_SetPriority( EXTI1_IRQn       , 14 ); /* GPIO                */
     NVIC_SetPriority( EXTI2_IRQn       , 14 ); /* GPIO                */
@@ -352,6 +358,28 @@ void platform_init_external_devices( void )
 #endif
 }
 
+admp441_device_data_t admp441_mic =
+{
+    .port   = WICED_I2S_1,
+    .chipen = WICED_I2S2_EN,
+    .clk    = WICED_I2S2_CK,
+    .ws     = WICED_I2S2_WS,
+    .sd     = WICED_I2S2_SD,
+    .mck    = WICED_I2S2_MCLK,
+};
+
+platform_result_t platform_init_audio( void )
+{
+    admp441_init(&admp441_mic);
+    return admp441_resume(&admp441_mic);
+}
+
+platform_result_t platform_deinit_audio( void )
+{
+    admp441_pause(&admp441_mic);
+    return admp441_deinit(&admp441_mic);
+}
+
 /* Checks if a factory reset is requested */
 wiced_bool_t platform_check_factory_reset( void )
 {
@@ -418,6 +446,27 @@ WWD_RTOS_DEFINE_ISR( usart6_rx_dma_irq )
     platform_uart_rx_dma_irq( &platform_uart_drivers[WICED_UART_6] );
 }
 
+#if !defined(BOOTLOADER)
+extern uint8_t IRQ_COUNTER;
+WWD_RTOS_DEFINE_ISR( i2s_irq )
+{
+IRQ_COUNTER++;
+    platform_i2s_irq( WICED_I2S_1 );
+}
+
+WWD_RTOS_DEFINE_ISR( i2s_tx_dma_irq )
+{
+IRQ_COUNTER++;
+    platform_i2s_tx_dma_irq( WICED_I2S_1 );
+}
+
+WWD_RTOS_DEFINE_ISR( i2s_rx_dma_irq )
+{
+IRQ_COUNTER++;
+    platform_i2s_rx_dma_irq( WICED_I2S_1 );
+}
+#endif
+
 /******************************************************
  *            Interrupt Handlers Mapping
  ******************************************************/
@@ -429,3 +478,8 @@ WWD_RTOS_MAP_ISR( usart1_rx_dma_irq, DMA2_Stream2_irq )
 WWD_RTOS_MAP_ISR( usart6_irq       , USART6_irq       )
 WWD_RTOS_MAP_ISR( usart6_tx_dma_irq, DMA2_Stream6_irq )
 WWD_RTOS_MAP_ISR( usart6_rx_dma_irq, DMA2_Stream1_irq )
+#if !defined(BOOTLOADER)
+WWD_RTOS_MAP_ISR( i2s_irq          , SPI2_irq         )
+WWD_RTOS_MAP_ISR( i2s_tx_dma_irq   , DMA1_Stream4_irq )
+WWD_RTOS_MAP_ISR( i2s_rx_dma_irq   , DMA1_Stream3_irq )
+#endif
diff --git a/platforms/AMAZONDASH/platform.h b/platforms/AMAZONDASH/platform.h
index 039fb38..2025337 100644
--- a/platforms/AMAZONDASH/platform.h
+++ b/platforms/AMAZONDASH/platform.h
@@ -73,6 +73,12 @@ typedef enum
 
 typedef enum
 {
+    WICED_I2S_1,
+    WICED_I2S_MAX, /* Denotes the total number of I2S port aliases. Not a valid I2S alias */
+} wiced_i2s_t;
+
+typedef enum
+{
     WICED_I2C_1,
     WICED_I2C_MAX,
     WICED_I2C_32BIT = 0x7FFFFFFF,
@@ -98,13 +104,6 @@ typedef enum
     WICED_ADC_1,
     WICED_ADC_2,
     WICED_ADC_3,
-    WICED_ADC_4,
-    WICED_ADC_5,
-    WICED_ADC_6,
-    WICED_ADC_7,
-    WICED_ADC_8,
-    WICED_ADC_9,
-    WICED_ADC_10,
     WICED_ADC_MAX, /* Denotes the total number of ADC port aliases. Not a valid ADC alias */
     WICED_ADC_32BIT = 0x7FFFFFFF,
 } wiced_adc_t;
@@ -138,6 +137,12 @@ typedef enum
 #define WICED_SPI_FLASH_MISO ( WICED_GPIO_6 )
 #define WICED_SPI_FLASH_MOSI ( WICED_GPIO_7 )
 
+#define WICED_I2S2_EN   ( WICED_GPIO_20 )
+#define WICED_I2S2_WS   ( WICED_GPIO_27 )
+#define WICED_I2S2_CK   ( WICED_GPIO_28 )
+#define WICED_I2S2_SD   ( WICED_GPIO_29 )
+#define WICED_I2S2_MCLK ( WICED_GPIO_30 )
+
 /* I/O connection <-> Peripheral Connections */
 #define WICED_LED1_JOINS_PWM        ( WICED_PWM_1 )
 #define WICED_LED2_JOINS_PWM        ( WICED_PWM_2 )
